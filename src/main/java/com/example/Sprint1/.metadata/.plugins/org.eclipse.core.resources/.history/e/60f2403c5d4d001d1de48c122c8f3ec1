package com.capg.service;



import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.capg.dto.Customerdto;
import com.capg.dto.Ordersdto;
import com.capg.dto.Paymentdto;
import com.capg.entity.Customer;
import com.capg.entity.Orders;
import com.capg.exception.CustomerServiceNotFoundException;
import com.capg.exception.OrderServiceNotFoundException;
import com.capg.repository.IOrderRepository;

@Service(value = "orderService")
@Transactional

public class OrderServiceImp implements IOrderService{
	
	@Autowired
	private IOrderRepository orderRepository;
	
	@Override
	public void addOrder(Ordersdto order) throws OrderServiceNotFoundException{
		Orders orderEntity = new Orders();
		orderEntity.setOrderId(order.getOrderId());
		orderEntity.setAmount(order.getAmount());
		orderEntity.setBillingDate(order.getBillingDate());
		orderEntity.setPaymentMethod(order.getPaymentMethod());
		orderEntity.setCustomer(order.getCustomer());
		orderEntity.setPayment(order.getPayment());			
		
	}
	@Override
	public void deleteOrder(Long orderId) throws OrderServiceNotFoundException{
		
		Optional<Orders> orders = orderRepository.findById(orderId);
		orders.orElseThrow(() -> new OrderServiceNotFoundException("Service.Order_NOT_FOUND"));
		orderRepository.deleteById(orderId);
		
	}
	@Override
	public void updateOrder(Long orderId, Orders orders) throws OrderServiceNotFoundException{
		Optional<Orders> order = orderRepository.findById(orderId);
		Orders o = order.orElseThrow(() -> new OrderServiceNotFoundException("Service.Order_NOT_FOUND"));
		o.setPaymentMethod(orders.getPaymentMethod());
	}
	@Override
	public Orders getOrderDetails(Long orderId) throws OrderServiceNotFoundException{
		Optional<Orders> optional = orderRepository.findById(orderId);
		Orders ord = optional.orElseThrow(() -> new OrderServiceNotFoundException("Service.Order_NOT_FOUND"));
		Orders order1 = new Orders();
		order1.setAmount(ord.getAmount());
		order1.setBillingDate(ord.getBillingDate());
		order1.setPaymentMethod(ord.getPaymentMethod());
		return order1;
	}
	public List<Orders> getAllOrders() throws OrderServiceNotFoundException{
		Iterable<Orders> order2 = orderRepository.findAll(); 
		List<Orders> order3 = new ArrayList<>();
		order2.forEach(order -> {
			Orders ords = new Orders();
			ords.setAmount(order.getAmount());
			ords.setBillingDate(order.getBillingDate());
			ords.setPaymentMethod(order.getPaymentMethod());
			order3.add(ords);
		});
		if (order3.isEmpty())
			throw new OrderServiceNotFoundException("Service.Order_NOT_FOUND");
		return order3;
	}

}
